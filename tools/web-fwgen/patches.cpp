#include "common.h"

void write_buffer(bin_t* buffer, const uint start, const byte* data, const uint size) {
    if (start + size > buffer->size) {
        if (!reallocate_buffer(&input, start + size - buffer->size, "firmware patches")) exit(7);
    }

    memcpy(&buffer->data[start], data, size);
}

template <typename T>
struct map_element {
    const uint address;
    const T patch_value;

    void patch(bin_t* buffer) const {
        patch(buffer, patch_value);
    }

    void patch(bin_t* buffer, const T value) const {
        patch(buffer, 0, value);
    }

    void patch(bin_t* buffer, const uint start, const T value) const {
        write_buffer(buffer, address + start, (byte*)&value, sizeof(T));
    }
};

template <typename T>
struct map_element<T*> {
    const uint address;
    const T* patch_value;
    const uint patch_count;

    void patch(bin_t* buffer) const {
        patch(buffer, patch_value, patch_count);
    }

    void patch(bin_t* buffer, const uint start) const {
        patch(buffer, start, patch_value, patch_count);
    }

    void patch(bin_t* buffer, const T* value, const uint count) const {
        patch(buffer, 0, value, count);
    }

    void patch(bin_t* buffer, const uint start, const T* value, const uint count) const {
        write_buffer(buffer, address + start, (byte*)value, count * sizeof(T));
    }
};

byte palette_data[512];

const std::vector<const map_element<byte*>> palette_maps = {
    { 0xCDB4, palette_data, 512},
    { 0xC95C, palette_data, 512},
    {0x5C610, palette_data, 512},
    { 0x3A43, palette_data, 384},
    {0x13D4C, palette_data, 384},
};

void verify_and_copy_palette(const byte family, byte* palette) {
    for (int i = 0; i < 384; i++) {
        if (palette[i] > 0x3F) {
            fprintf(stderr, "Invalid palette received for patching.\n");
            exit(7);
        }

        if (family == LPX_FAMILY_ID)
            palette_data[i / 3 * 4 + 2 - i % 3] = palette[i] << 2;

        else if (family == LPRGB_FAMILY_ID)
            palette_data[i] = palette[i];
    }
}

const std::vector<byte> lpx_fast_led_patch = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xF7, 0xB3, 0xFE, 0x00, 0x28, 0x05, 0xD1, 0xFC, 0xF7,
    0x98, 0xFA, 0x00, 0xF0, 0x04, 0xF8, 0xFC, 0xF7, 0xD3, 0xBA, 0xFC, 0xF7, 0x49, 0xBB, 0x0B, 0x78,
    0xF0, 0x2B, 0x01, 0xD0, 0x00, 0x20, 0x70, 0x47, 0xF0, 0xB4, 0x4B, 0x78, 0x5F, 0x2B, 0x0E, 0x46,
    0x02, 0xD0, 0x00, 0x20, 0xF0, 0xBC, 0x70, 0x47, 0x57, 0x1E, 0x0F, 0x44, 0x02, 0x36, 0xB7, 0x42,
    0x70, 0xD9, 0x68, 0x4C, 0x31, 0x78, 0x72, 0x78, 0xB5, 0x78, 0x0B, 0x11, 0x50, 0x11, 0x00, 0xF0,
    0x02, 0x00, 0x03, 0xF0, 0x04, 0x03, 0x03, 0x43, 0xC5, 0xF3, 0x80, 0x10, 0x03, 0x43, 0x00, 0xF0,
    0xAD, 0x80, 0x01, 0xF0, 0x3F, 0x00, 0x80, 0x04, 0x02, 0xF0, 0x3F, 0x02, 0x05, 0xF0, 0x3F, 0x05,
    0x40, 0xEA, 0x82, 0x20, 0x40, 0xEA, 0x85, 0x00, 0xDB, 0xB2, 0xF5, 0x1C, 0x5E, 0x1E, 0xF6, 0xB2,
    0x01, 0x36, 0x2E, 0x44, 0x1B, 0xE0, 0xA4, 0xFB, 0x03, 0x12, 0xD1, 0x08, 0x0A, 0x46, 0xC2, 0xF1,
    0x09, 0x02, 0x01, 0xEB, 0x81, 0x01, 0x02, 0xEB, 0x82, 0x02, 0xA3, 0xEB, 0x41, 0x03, 0x03, 0xEB,
    0x42, 0x03, 0xDB, 0xB2, 0x9B, 0x00, 0x03, 0xF1, 0x00, 0x53, 0x03, 0xF5, 0xD3, 0x42, 0xC3, 0xF8,
    0x14, 0x03, 0x13, 0x68, 0x03, 0xF0, 0xF8, 0x03, 0x13, 0x60, 0xB5, 0x42, 0x30, 0xD0, 0x15, 0xF8,
    0x01, 0x3B, 0x93, 0xB3, 0xA3, 0xF1, 0x0B, 0x02, 0x58, 0x2A, 0xDC, 0xD9, 0xA3, 0xF1, 0x65, 0x02,
    0x08, 0x2A, 0x4A, 0xD9, 0xA3, 0xF1, 0x6F, 0x02, 0x08, 0x2A, 0xEE, 0xD8, 0x64, 0x3B, 0xDB, 0xB2,
    0xA4, 0xFB, 0x03, 0x21, 0xCA, 0x08, 0x11, 0x46, 0xC1, 0xF1, 0x09, 0x01, 0x02, 0xEB, 0x82, 0x02,
    0xA3, 0xEB, 0x42, 0x02, 0x01, 0xEB, 0x81, 0x01, 0x02, 0xEB, 0x41, 0x02, 0xD2, 0xB2, 0x92, 0x00,
    0x02, 0xF1, 0x00, 0x52, 0x02, 0xF5, 0xD3, 0x41, 0xC2, 0xF8, 0x14, 0x03, 0x0A, 0x68, 0x0A, 0x33,
    0xDB, 0xB2, 0x02, 0xF0, 0xF8, 0x02, 0x59, 0x2B, 0x0A, 0x60, 0xE1, 0xD9, 0xB5, 0x42, 0xCE, 0xD1,
    0xBE, 0x42, 0x8F, 0xD3, 0x01, 0x20, 0xF0, 0xBC, 0x70, 0x47, 0x0B, 0x21, 0xA4, 0xFB, 0x01, 0x32,
    0xD3, 0x08, 0x1A, 0x46, 0xC2, 0xF1, 0x09, 0x02, 0x03, 0xEB, 0x83, 0x03, 0xA1, 0xEB, 0x43, 0x03,
    0x02, 0xEB, 0x82, 0x02, 0x03, 0xEB, 0x42, 0x03, 0xDB, 0xB2, 0x9B, 0x00, 0x03, 0xF1, 0x00, 0x53,
    0x03, 0xF5, 0xD3, 0x42, 0xC3, 0xF8, 0x14, 0x03, 0x13, 0x68, 0x01, 0x31, 0xC9, 0xB2, 0x03, 0xF0,
    0xF8, 0x03, 0x64, 0x29, 0x13, 0x60, 0xE1, 0xD1, 0xA7, 0xE7, 0x03, 0xEB, 0x83, 0x03, 0x5A, 0x00,
    0x19, 0x32, 0x02, 0xF0, 0xFF, 0x02, 0xD1, 0x1D, 0xA4, 0xFB, 0x02, 0x3C, 0x4F, 0xEA, 0xDC, 0x03,
    0x9C, 0x46, 0xCC, 0xF1, 0x09, 0x0C, 0x03, 0xEB, 0x83, 0x03, 0xA2, 0xEB, 0x43, 0x03, 0x0C, 0xEB,
    0x8C, 0x0C, 0x03, 0xEB, 0x4C, 0x03, 0xDB, 0xB2, 0x9B, 0x00, 0x03, 0xF1, 0x00, 0x53, 0x03, 0xF5,
    0xD3, 0x4C, 0xC3, 0xF8, 0x14, 0x03, 0xDC, 0xF8, 0x00, 0x30, 0x01, 0x32, 0xD2, 0xB2, 0x03, 0xF0,
    0xF8, 0x03, 0x8A, 0x42, 0xCC, 0xF8, 0x00, 0x30, 0xDE, 0xDD, 0x7E, 0xE7, 0x02, 0xF0, 0x3F, 0x00,
    0x80, 0x02, 0x01, 0xF0, 0x3F, 0x01, 0xF3, 0x78, 0x05, 0xF0, 0x3F, 0x05, 0x40, 0xEA, 0x81, 0x40,
    0x40, 0xEA, 0x85, 0x00, 0x35, 0x1D, 0x00, 0x2B, 0x7F, 0xF4, 0x50, 0xAF, 0x2E, 0x46, 0xBE, 0x42,
    0xFF, 0xF4, 0x30, 0xAF, 0x9E, 0xE7, 0xCD, 0xCC, 0xCC, 0xCC
};

const std::vector<byte> lpminimk3_fast_led_patch = {
    0x00, 0xFC, 0xF7, 0x93, 0xFF, 0x00, 0x28, 0x05, 0xD1, 0xFC, 0xF7, 0x78, 0xFB, 0x00, 0xF0, 0x04,
    0xF8, 0xFC, 0xF7, 0xB3, 0xBB, 0xFC, 0xF7, 0x29, 0xFC, 0x0B, 0x78, 0xF0, 0x2B, 0x01, 0xD0, 0x00,
    0x20, 0x70, 0x47, 0x2D, 0xE9, 0xF0, 0x41, 0x4B, 0x78, 0x5F, 0x2B, 0x0F, 0x46, 0x02, 0xD0, 0x00,
    0x20, 0xBD, 0xE8, 0xF0, 0x81, 0x02, 0xF1, 0xFF, 0x3C, 0x8C, 0x44, 0x02, 0x37, 0xBC, 0x45, 0x72,
    0xD9, 0x69, 0x4D, 0x6A, 0x48, 0x3E, 0x78, 0x7A, 0x78, 0xB9, 0x78, 0x33, 0x11, 0x54, 0x11, 0x04,
    0xF0, 0x02, 0x04, 0x03, 0xF0, 0x04, 0x03, 0x23, 0x43, 0xC1, 0xF3, 0x80, 0x14, 0x23, 0x43, 0x00,
    0xF0, 0xAD, 0x80, 0x06, 0xF0, 0x3F, 0x04, 0xA4, 0x04, 0x02, 0xF0, 0x3F, 0x02, 0x44, 0xEA, 0x82,
    0x24, 0x01, 0xF0, 0x3F, 0x01, 0x44, 0xEA, 0x81, 0x04, 0xFE, 0x1C, 0xDB, 0xB2, 0x5F, 0x1E, 0xFF,
    0xB2, 0x01, 0x37, 0x37, 0x44, 0x1B, 0xE0, 0xA5, 0xFB, 0x03, 0x21, 0xCA, 0x08, 0x11, 0x46, 0xC1,
    0xF1, 0x09, 0x01, 0x02, 0xEB, 0x82, 0x02, 0xA3, 0xEB, 0x42, 0x03, 0x01, 0xEB, 0x81, 0x01, 0x03,
    0xEB, 0x41, 0x03, 0xDB, 0xB2, 0x9A, 0x00, 0x02, 0xF1, 0x00, 0x52, 0xC2, 0xF8, 0x04, 0x43, 0x50,
    0xF8, 0x23, 0x20, 0x02, 0xF0, 0xF8, 0x02, 0x40, 0xF8, 0x23, 0x20, 0xBE, 0x42, 0x31, 0xD0, 0x16,
    0xF8, 0x01, 0x3B, 0x9B, 0xB3, 0xA3, 0xF1, 0x0B, 0x02, 0x58, 0x2A, 0xDC, 0xD9, 0xA3, 0xF1, 0x65,
    0x02, 0x08, 0x2A, 0x4B, 0xD9, 0xA3, 0xF1, 0x6F, 0x02, 0x08, 0x2A, 0xEE, 0xD8, 0x64, 0x3B, 0xDB,
    0xB2, 0xA5, 0xFB, 0x03, 0x2E, 0x4F, 0xEA, 0xDE, 0x02, 0x96, 0x46, 0xCE, 0xF1, 0x09, 0x0E, 0x02,
    0xEB, 0x82, 0x02, 0xA3, 0xEB, 0x42, 0x01, 0x0E, 0xEB, 0x8E, 0x0E, 0x01, 0xEB, 0x4E, 0x01, 0xC9,
    0xB2, 0x8A, 0x00, 0x02, 0xF1, 0x00, 0x52, 0x0A, 0x33, 0xC2, 0xF8, 0x04, 0x43, 0x50, 0xF8, 0x21,
    0x20, 0xDB, 0xB2, 0x02, 0xF0, 0xF8, 0x02, 0x59, 0x2B, 0x40, 0xF8, 0x21, 0x20, 0xE0, 0xD9, 0xBE,
    0x42, 0xCD, 0xD1, 0x67, 0x45, 0x8E, 0xD3, 0x01, 0x20, 0xBD, 0xE8, 0xF0, 0x81, 0x0B, 0x21, 0xA5,
    0xFB, 0x01, 0x32, 0xD3, 0x08, 0x1A, 0x46, 0xC2, 0xF1, 0x09, 0x02, 0x03, 0xEB, 0x83, 0x03, 0xA1,
    0xEB, 0x43, 0x03, 0x02, 0xEB, 0x82, 0x02, 0x03, 0xEB, 0x42, 0x03, 0xDB, 0xB2, 0x9A, 0x00, 0x02,
    0xF1, 0x00, 0x52, 0x01, 0x31, 0xC2, 0xF8, 0x04, 0x43, 0x50, 0xF8, 0x23, 0x20, 0xC9, 0xB2, 0x02,
    0xF0, 0xF8, 0x02, 0x64, 0x29, 0x40, 0xF8, 0x23, 0x20, 0xE1, 0xD1, 0xA6, 0xE7, 0x03, 0xEB, 0x83,
    0x03, 0x5B, 0x00, 0x19, 0x33, 0x03, 0xF0, 0xFF, 0x03, 0x03, 0xF1, 0x07, 0x0E, 0xA5, 0xFB, 0x03,
    0x28, 0x4F, 0xEA, 0xD8, 0x02, 0x90, 0x46, 0xC8, 0xF1, 0x09, 0x08, 0x02, 0xEB, 0x82, 0x02, 0xA3,
    0xEB, 0x42, 0x01, 0x08, 0xEB, 0x88, 0x08, 0x01, 0xEB, 0x48, 0x01, 0xC9, 0xB2, 0x8A, 0x00, 0x02,
    0xF1, 0x00, 0x52, 0x01, 0x33, 0xC2, 0xF8, 0x04, 0x43, 0x50, 0xF8, 0x21, 0x20, 0xDB, 0xB2, 0x02,
    0xF0, 0xF8, 0x02, 0x73, 0x45, 0x40, 0xF8, 0x21, 0x20, 0xE0, 0xDD, 0x7E, 0xE7, 0x02, 0xF0, 0x3F,
    0x04, 0x06, 0xF0, 0x3F, 0x06, 0xA4, 0x02, 0xFB, 0x78, 0x44, 0xEA, 0x86, 0x44, 0x01, 0xF0, 0x3F,
    0x01, 0x44, 0xEA, 0x81, 0x04, 0x3E, 0x1D, 0x00, 0x2B, 0x7F, 0xF4, 0x50, 0xAF, 0x37, 0x46, 0x67,
    0x45, 0xFF, 0xF4, 0x30, 0xAF, 0x9F, 0xE7, 0x00, 0xBF, 0xCD, 0xCC, 0xCC, 0xCC, 0x54, 0x67, 0x00,
    0x20
};

const std::vector<byte> lpmk2_fast_led_patch = {
    0x00, 0xF0, 0x08, 0xF8, 0x00, 0x28, 0x7D, 0xF4, 0xAF, 0xAD, 0x20, 0x00, 0xFD, 0xF7, 0x14, 0xFA,
    0xFD, 0xF7, 0xEF, 0xBC, 0x02, 0x78, 0xF0, 0x2A, 0x01, 0xD0, 0x00, 0x20, 0x70, 0x47, 0x42, 0x78,
    0x5F, 0x2A, 0x03, 0x46, 0xF9, 0xD1, 0x2D, 0xE9, 0xF0, 0x4F, 0x84, 0x78, 0x87, 0xB0, 0x02, 0x33,
    0xF7, 0x2C, 0x04, 0x93, 0x00, 0xF0, 0x99, 0x80, 0x04, 0x9B, 0x13, 0xF8, 0x01, 0x2F, 0xF7, 0x2A,
    0xFB, 0xD1, 0x04, 0x9A, 0x05, 0x93, 0x9A, 0x42, 0x80, 0xF0, 0x8F, 0x80, 0x49, 0x4F, 0xDF, 0xF8,
    0x30, 0x81, 0x00, 0x26, 0x21, 0x46, 0x04, 0x9B, 0x5A, 0x78, 0x9D, 0x78, 0x53, 0x11, 0x03, 0xF0,
    0x02, 0x03, 0xC5, 0xF3, 0x80, 0x14, 0x08, 0x11, 0x00, 0xF0, 0x04, 0x00, 0x23, 0x43, 0x03, 0x43,
    0x04, 0x98, 0x68, 0xD0, 0x00, 0xF1, 0x03, 0x0A, 0xDB, 0xB2, 0x01, 0xF0, 0x3F, 0x0B, 0x02, 0xF0,
    0x3F, 0x04, 0x05, 0xF0, 0x3F, 0x05, 0x01, 0x3B, 0xDB, 0xB2, 0x01, 0x33, 0x53, 0x44, 0xCD, 0xE9,
    0x03, 0xA3, 0xAA, 0x46, 0x0A, 0xE0, 0x38, 0x4B, 0x59, 0x46, 0xD0, 0x5C, 0x00, 0x96, 0x53, 0x46,
    0x22, 0x46, 0xB8, 0x47, 0xDD, 0xE9, 0x03, 0x32, 0x93, 0x42, 0x21, 0xD0, 0x03, 0x9B, 0x13, 0xF8,
    0x01, 0x2B, 0x03, 0x93, 0x1A, 0xB3, 0xA2, 0xF1, 0x0B, 0x01, 0x58, 0x29, 0xEB, 0xD9, 0xA2, 0xF1,
    0x65, 0x01, 0x08, 0x29, 0x26, 0xD9, 0xA2, 0xF1, 0x6F, 0x01, 0x08, 0x29, 0xEA, 0xD8, 0x64, 0x3A,
    0xD5, 0xB2, 0x29, 0x4B, 0xE8, 0x5C, 0x00, 0x96, 0x0A, 0x35, 0x53, 0x46, 0x22, 0x46, 0x59, 0x46,
    0xED, 0xB2, 0xB8, 0x47, 0x59, 0x2D, 0xF4, 0xD9, 0xDD, 0xE9, 0x03, 0x32, 0x93, 0x42, 0xDD, 0xD1,
    0x05, 0x9B, 0x19, 0x46, 0x04, 0x9B, 0x99, 0x42, 0x37, 0xD9, 0x19, 0x78, 0xAB, 0xE7, 0x1F, 0x4D,
    0x15, 0xF8, 0x01, 0x0B, 0x00, 0x96, 0x53, 0x46, 0x22, 0x46, 0x59, 0x46, 0xB8, 0x47, 0x45, 0x45,
    0xF6, 0xD1, 0xC7, 0xE7, 0x02, 0xEB, 0x82, 0x02, 0x4F, 0xEA, 0x42, 0x09, 0x09, 0xF1, 0x19, 0x09,
    0x09, 0xF0, 0xFF, 0x09, 0x09, 0xF1, 0x07, 0x05, 0x13, 0x4B, 0x19, 0xF8, 0x03, 0x00, 0x00, 0x96,
    0x09, 0xF1, 0x01, 0x09, 0x53, 0x46, 0x22, 0x46, 0x59, 0x46, 0x5F, 0xFA, 0x89, 0xF9, 0xB8, 0x47,
    0xA9, 0x45, 0xF1, 0xDD, 0xAE, 0xE7, 0xC3, 0x78, 0x01, 0xF0, 0x3F, 0x0B, 0x02, 0xF0, 0x3F, 0x04,
    0x05, 0xF0, 0x3F, 0x05, 0x00, 0xF1, 0x04, 0x0A, 0x00, 0x2B, 0x94, 0xD1, 0x05, 0x9B, 0xCD, 0xF8,
    0x10, 0xA0, 0x19, 0x46, 0x04, 0x9B, 0x99, 0x42, 0xC7, 0xD8, 0x01, 0x20, 0x07, 0xB0, 0xBD, 0xE8,
    0xF0, 0x8F, 0x00, 0xBF, 0x89, 0x4D, 0x00, 0x08, 0xA6, 0x6C, 0x00, 0x08, 0xB1, 0x6C, 0x00, 0x08,
    0x0A, 0x6D, 0x00, 0x08
};

struct fast_led_map {
    const map_element<byte*> fast_led;
    const map_element<byte> version;
    const map_element<uint> sysex_injection;
    const char* version_string;
};

const std::vector<fast_led_map> fast_led_maps = {
    {
        {0x0, lpx_fast_led_patch.data(), lpx_fast_led_patch.size()},
        {0x1FD, 0x32}, {0xD076, 0xBD23F003}, "352"
    },
    {
        {0x0, lpminimk3_fast_led_patch.data(), lpminimk3_fast_led_patch.size()},
        {0x1FD, 0x38}, {0xCC1E, 0xBC43F003}, "408"
    },
    {
        {0x0, lpmk2_fast_led_patch.data(), lpmk2_fast_led_patch.size()},
        {0x130, 0x72}, {0x27EE, 0xBB07F002}, "172"
    },
};

const std::vector<byte> fast_led_products {
    LPX_PRODUCT_ID,
    LPMINIMK3_PRODUCT_ID,
    LPMK2_PRODUCT_ID
};

void patch(const byte family, const byte target, const byte index, bool* args, byte* palette, char* version) {
    if (target == LPPROMK3_PRODUCT_ID) return;

    // Patch palette
    if (args[0]) { 
        verify_and_copy_palette(family, palette);
        palette_maps[index].patch(&input);
    }

    // Apollo Studio fast LED patch
    int i = vector_indexof(&fast_led_products, target);
    
    if (args[1] && i != -1) {
        fast_led_maps[i].fast_led.patch(&input, input.size);
        fast_led_maps[i].version.patch(&input);
        fast_led_maps[i].sysex_injection.patch(&input);
        strcpy(version, fast_led_maps[i].version_string);
    }
}